import ColorSwap;
import flixel.util.FlxColor;
var blackScreen;
var credGroup;
var credTextShit;
var textGroup;
var ngSpr;
var titleTextColors = [0xFF33FFFF, 0xFF3333CC];
var titleTextAlphas = [1, 0.64];
var curWacky = [];

var wackyImage;

var mustUpdate = false;

var titleJSON;
var skippedIntro = false;

function create() 
{
   
    FlixG.autoPause = true;
    curWacky = getRandomObject(getIntroTextShit());
    //curWacky = ["CUIDADO", "GUAYANDO"];
    swagShader = new ColorSwap();
    titleJSON = CoolUtil.parseJson(Paths.getTextFromFile('images/gfDanceTitle.json'));
    if (titleEaster){
    if (flixelSave.data.psychDevsEasterEgg == null) flixelSave.data.psychDevsEasterEgg = ''; //Crash prevention
		switch(flixelSave.data.psychDevsEasterEgg.toUpperCase())
		{
			case 'SHADOW':
				titleJSON.gfx += 210;
				titleJSON.gfy += 40;
			case 'RIVER':
				titleJSON.gfx += 100;
				titleJSON.gfy += 20;
			case 'SHUBS':
				titleJSON.gfx += 160;
				titleJSON.gfy -= 10;
			case 'BBPANZU':
				titleJSON.gfx += 45;
				titleJSON.gfy += 100;
		}
    }
    if(!TitleState.initialized)
		{
			if(flixelSave.data != null && flixelSave.data.fullscreen)
			{
				FlixG.fullscreen = FlixG.save.data.fullscreen;
				//trace('LOADED FULLSCREEN SETTING!!');
			}
            togglePersistUpdate(true);
            togglePersistentDraw(true);
		}
        FlixG.mouse.visible = false;
        if (TitleState.initialized){
            startIntro();
        }
        else{
    new FlxTimer().start(1, function(tmr)
    {
        startIntro();
    });
}
}
var camZoomingDecay = 1;
var logoBl;
var gfDance;
var danceLeft = false;
var titleText;
var swagShader;
function startIntro()
{
    if (!TitleState.initialized)
    {
      //  makeTransition();
      trace('lmao');
      if(FlixG.sound.music == null) {
        FlixG.sound.playMusic(Paths.music(ClientPrefs.menuMusic));
    }
    }
switch (ClientPrefs.menuMusic){
    case 'FreakyMenu':
    Conductor.changeBPM(titleJSON.bpm);
    case 'Approval-Desire':
        Conductor.changeBPM(165);
        case 'Angels-Of-The-Apocalypse':
            Conductor.changeBPM(124.97);
            case 'Angel-Star-Tour-Song':
                Conductor.changeBPM(85);
}
    togglePersistUpdate(true);

    var bg = new FlxSprite();

    if (titleJSON.backgroundSprite != null && titleJSON.backgroundSprite.length > 0 && titleJSON.backgroundSprite != "none"){
        bg.loadGraphic(Paths.image(titleJSON.backgroundSprite));
    }else{
        bg.makeGraphic(FlixG.width, FlixG.height, BlackColor);
    }

    // bg.antialiasing = ClientPrefs.globalAntialiasing;
    // bg.setGraphicSize(Std.int(bg.width * 0.6));
    // bg.updateHitbox();
    add(bg);

    logoBl = new FlxSprite(titleJSON.titlex, titleJSON.titley);
    logoBl.frames = Paths.getSparrowAtlas('logoBumpin');

    logoBl.antialiasing = ClientPrefs.globalAntialiasing;
    logoBl.animation.addByPrefix('bump', 'logo bumping0', 24, false);
    logoBl.animation.play('bump');
    logoBl.updateHitbox();
    // logoBl.screenCenter();
    // logoBl.color = FlxColor.BLACK;

    swagShader = new ColorSwap();
    gfDance = new FlxSprite(titleJSON.gfx, titleJSON.gfy);

    var easterEgg = flixelSave.psychDevsEasterEgg;
    if(easterEgg == null) easterEgg = ''; //html5 fix
    if (titleEaster){
    switch(easterEgg.toUpperCase())
    {
        
        case 'SHADOW':
            gfDance.frames = Paths.getSparrowAtlas('ShadowBump');
            gfDance.animation.addByPrefix('danceLeft', 'Shadow Title Bump', 24);
            gfDance.animation.addByPrefix('danceRight', 'Shadow Title Bump', 24);
        case 'RIVER':
            gfDance.frames = Paths.getSparrowAtlas('RiverBump');
            gfDance.animation.addByIndices('danceLeft', 'River Title Bump', [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], "", 24, false);
            gfDance.animation.addByIndices('danceRight', 'River Title Bump', [29, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], "", 24, false);
        case 'SHUBS':
            gfDance.frames = Paths.getSparrowAtlas('ShubBump');
            gfDance.animation.addByPrefix('danceLeft', 'Shub Title Bump', 24, false);
            gfDance.animation.addByPrefix('danceRight', 'Shub Title Bump', 24, false);
        case 'BBPANZU':
            gfDance.frames = Paths.getSparrowAtlas('BBBump');
            gfDance.animation.addByIndices('danceLeft', 'BB Title Bump', [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], "", 24, false);
            gfDance.animation.addByIndices('danceRight', 'BB Title Bump', [27, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], "", 24, false);
        }
    }
    switch(easterEgg.toUpperCase())
    {
        default:
        //EDIT THIS ONE IF YOU'RE MAKING A SOURCE CODE MOD!!!!
        //EDIT THIS ONE IF YOU'RE MAKING A SOURCE CODE MOD!!!!
        //EDIT THIS ONE IF YOU'RE MAKING A SOURCE CODE MOD!!!!
            gfDance.frames = Paths.getSparrowAtlas('gfDanceTitle');
            gfDance.animation.addByIndices('danceLeft', 'gfDance', [30, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], "", 24, false);
            gfDance.animation.addByIndices('danceRight', 'gfDance', [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], "", 24, false);
    }
    gfDance.antialiasing = ClientPrefs.globalAntialiasing;

    add(gfDance);
    gfDance.shader = swagShader.shader;
    add(logoBl);
    logoBl.shader = swagShader.shader;

    titleText = new FlxSprite(titleJSON.startx, titleJSON.starty);
    if (desktop && modsallowed){
    var path = "mods/" + Paths.currentModDirectory + "/images/titleEnter.png";
    //trace(path, FileSystem.exists(path));
    if (!FNFAssets.exists(path)){
        path = "mods/images/titleEnter.png";
    }
    //trace(path, FileSystem.exists(path));
    if (!FNFAssets.exists(path)){
        path = "windose_data/images/titleEnter.png";
    }
    //trace(path, FileSystem.exists(path));
    titleText.frames = FlxAtlasFrames.fromSparrow(BitmapData.fromFile(path),File.getContent(StringTools.replace(path,".png",".xml")));
}else{

    titleText.frames = Paths.getSparrowAtlas('titleEnter');
}
var animFrames = [];
privateAccess(function(){
    titleText.animation.findByPrefix(animFrames, "ENTER IDLE");
    titleText.animation.findByPrefix(animFrames, "ENTER FREEZE");
});
    

    if (animFrames.length > 0) {
        newTitle = true;
        
        titleText.animation.addByPrefix('idle', "ENTER IDLE", 24);
        if (ClientPrefs.flashing)
        titleText.animation.addByPrefix('press', "ENTER PRESSED", 24);
        else
            titleText.animation.addByPrefix('press', "ENTER FREEZE", 24);
    }
    else {
        newTitle = false;
        
        titleText.animation.addByPrefix('idle', "Press Enter to Begin", 24);
        titleText.animation.addByPrefix('press', "ENTER PRESSED", 24);
    }
    
    titleText.antialiasing = ClientPrefs.globalAntialiasing;
    titleText.animation.play('idle');
    titleText.updateHitbox();
    // titleText.screenCenter(X);
    add(titleText);

    var logo = new FlxSprite().loadGraphic(Paths.image('logo'));
    logo.screenCenter();
    logo.antialiasing = ClientPrefs.globalAntialiasing;
    // add(logo);

    // FlxTween.tween(logoBl, {y: logoBl.y + 50}, 0.6, {ease: FlxEase.quadInOut, type: PINGPONG});
    // FlxTween.tween(logo, {y: logoBl.y + 50}, 0.6, {ease: FlxEase.quadInOut, type: PINGPONG, startDelay: 0.1});

    credGroup = new FlxGroup();
    add(credGroup);
    textGroup = new FlxGroup();

    blackScreen = new FlxSprite().makeGraphic(FlixG.width, FlixG.height, BlackColor);
    credGroup.add(blackScreen);

    credTextShit = new Alphabet(0, 0, "", true);
    credTextShit.screenCenter();

    // credTextShit.alignment = CENTER;

    credTextShit.visible = false;

    ngSpr = new FlxSprite(0, FlxG.height * 0.52).loadGraphic(Paths.image('newgrounds_logo'));
    add(ngSpr);
    ngSpr.visible = false;
    ngSpr.setGraphicSize(Std.int(ngSpr.width * 0.8));
    ngSpr.updateHitbox();
    ngSpr.screenCenter();
    ngSpr.y += 150;
    ngSpr.antialiasing = ClientPrefs.globalAntialiasing;

    FlxTween.tween(credTextShit, {y: credTextShit.y + 20}, 2.9, {ease: FlxEase.quadInOut, type: 4});

    if (TitleState.initialized)
        skipIntro();
    else
        TitleState.initialized = true;



        if (Main.fpsVar.x != 10)
            Main.fpsVar.x = 10;
}

function getIntroTextShit()
{
    var fullText = FNFAssets.getText(Paths.txt('introText'));

    var firstArray = fullText.split('\n');
    var swagGoodArray = [[]];

    for (i in firstArray)
    {
        swagGoodArray.push(i.split('--'));
    }

    return swagGoodArray;
}

var transitioning = false;
var playJingle = false;
var newTitle = false;
var titleTimer = 0;
function update(elapsed)
{

    
    FlxG.camera.zoom = FlxMath.lerp(1, FlxG.camera.zoom, CoolUtil.boundTo(1 - (elapsed * 3.125 * camZoomingDecay), 0, 1));
    if (FlixG.sound.music != null)
        Conductor.songPosition = FlixG.sound.music.time;

    if (FlxG.keys.justPressed.F)
    {
        FlxG.fullscreen = !FlxG.fullscreen;
    }

    var pressedEnter =  FlxG.keys.justPressed.ENTER || controls.ACCEPT;
    if(mobile){
        for (touch in FlixG.touches.list)
        {
            if (touch.justPressed)
            {
                pressedEnter = true;
            }
        }
    }
	if (newTitle) {
        titleTimer += CoolUtil.boundTo(elapsed, 0, 1);
        if (titleTimer > 2) titleTimer -= 2;
    }
    if (!transitioning && skippedIntro)
		{
			if (newTitle && !pressedEnter)
			{
				var timer = titleTimer;
				if (timer >= 1)
					timer = (-timer) + 2;
				
				timer = FlxEase.quadInOut(timer);
				
				titleText.color = interpolate(titleTextColors[0], titleTextColors[1], timer);
				titleText.alpha = FlxMath.lerp(titleTextAlphas[0], titleTextAlphas[1], timer);
			}
			
			if(pressedEnter)
			{
                if(titleText != null){
				titleText.color = OGcolor;
				titleText.alpha = 1;
				 titleText.animation.play('press');
                }
if (ClientPrefs.flashing)
    FlixG.camera.flash(OGcolor, 1);
else
    FlixG.camera.flash(0x4CFFFFFF, 1);
FlixG.sound.play(Paths.sound('confirmMenu'), 0.7);

				transitioning = true;
				// FlxG.sound.music.stop();

				new FlxTimer().start(1, function(tmr)
				{
					if (mustUpdate) {
						MusicBeatState.switchState(new OutdatedState());
					} else {
						MusicBeatState.switchState(new MainMenuState());
					}
					closedState = true;
				});
				// FlxG.sound.play(Paths.music('titleShoot'), 0.7);
			}else if (titleEaster && FlixG.keys.firstJustPressed() != FlxKey.NONE)
			{
				var keyPressed = FlixG.keys.firstJustPressed();
				var keyName = Std.string(keyPressed);
				if(allowedKeys.contains(keyName)) {
					easterEggKeysBuffer += keyName;
					if(easterEggKeysBuffer.length >= 32) easterEggKeysBuffer = easterEggKeysBuffer.substring(1);
					//trace('Test! Allowed Key pressed!!! Buffer: ' + easterEggKeysBuffer);

					for (wordRaw in easterEggKeys)
					{
						var word = wordRaw.toUpperCase(); //just for being sure you're doing it right
						if (easterEggKeysBuffer.contains(word))
						{
							//trace('YOOO! ' + word);
							if (flixelSave.data.psychDevsEasterEgg == word)
								flixelSave.data.psychDevsEasterEgg = '';
							else
								flixelSave.data.psychDevsEasterEgg = word;
							flixelSave.flush();

							FlxG.sound.play(Paths.sound('ToggleJingle'));

							var black = new FlxSprite(0, 0).makeGraphic(FlixG.width, FlixG.height, BlackColor);
							black.alpha = 0;
							add(black);

							FlxTween.tween(black, {alpha: 1}, 1, {onComplete:
								function(twn) {
									MusicBeatState.switchState(new TitleState());
								}
							});
							FlxG.sound.music.fadeOut();
							if(FreeplayState.vocals != null)
							{
								FreeplayState.vocals.fadeOut();
							}
							closedState = true;
							transitioning = true;
							playJingle = true;
							easterEggKeysBuffer = '';
							break;
						}
					}
				}
			}
        }

    if (pressedEnter && !skippedIntro)
    {
        skipIntro();
    }
    
		if(swagShader != null)
            {
                if(controls.UI_LEFT) swagShader.hue -= elapsed * 0.1;
                if(controls.UI_RIGHT) swagShader.hue += elapsed * 0.1;
            }
}

function createCoolText(textArray, offset)
{
    for (i in 0...textArray.length)
    {
        var money = new Alphabet(0, 0, textArray[i], true, false);
        money.screenCenter(88);
        money.y += (i * 60) + 200 + offset;
        money.y -= 350;
        if(credGroup != null && textGroup != null) {
        credGroup.add(money);
        textGroup.add(money);
        }
    }
}

function addMoreText(text, offset)
{
    var coolText = new Alphabet(0, 0, text, true, false);
    coolText.screenCenter(88);
    coolText.y += (textGroup.length * 60) + 200 + offset;
    coolText.y -= 350;
    credGroup.add(coolText);
    textGroup.add(coolText);
}

function deleteCoolText()
{
    while (textGroup.members.length > 0)
    {
        credGroup.remove(textGroup.members[0], true);
        textGroup.remove(textGroup.members[0], true);
    }
}
var sickBeats = 0;
function stepHit(step)
    {
        switch (ClientPrefs.menuMusic){
            case 'Approval-Desire':
                if (curBeat >= 88 && curBeat <= 92)
               FlxG.camera.zoom += 0.15;
        }   
    }
function beatHit(beat)
{
    switch (ClientPrefs.menuMusic){
        case 'Approval-Desire':
            if ((beat % 2 == 0 && beat >= 64 && beat < 80) || beat >= 80 && beat <88)
           FlxG.camera.zoom += 0.15;
    }
	if(logoBl != null)
        logoBl.animation.play('bump', true);

    if(gfDance != null) {
        danceLeft = !danceLeft;
        if (danceLeft)
            gfDance.animation.play('danceRight');
        else
            gfDance.animation.play('danceLeft');
    }

    if(!closedState) {
        sickBeats++;
        switch (sickBeats)
        {
            case 1:
                //FlxG.sound.music.stop();
                if(!FlixG.sound.music.playing) 
                FlixG.sound.playMusic(Paths.music(ClientPrefs.menuMusic));
            case 2:
                if (watermark)
                createCoolText(['Psych Engine by'], 15);
                else
                createCoolText(['ninjamuffin99', 'phantomArcade', 'kawaisprite', 'evilsk8er']);

            // credTextShit.visible = true;
            case 4:
                if (watermark){
                addMoreText('Shadow Mario', 15);
                addMoreText('RiverOaken', 15);
                addMoreText('shubs', 15);
                }
                else
                addMoreText('present');

            // credTextShit.text += '\npresent...';
            // credTextShit.addText();
            case 5:
                deleteCoolText();
            case 7:
                if (watermark)
                createCoolText(['Modding Plus Engine by'], 15);

            // credTextShit.visible = true;
            case 9:
                if (watermark){
                addMoreText('BullyVR', 15);
                addMoreText('Axy', 15);
                addMoreText('DJ Popsicle', 15);
                }

            // credTextShit.text += '\npresent...';
            // credTextShit.addText();
            case 10:
                deleteCoolText();
            // credTextShit.visible = false;
            // credTextShit.text = 'In association \nwith';
            // credTextShit.screenCenter();
            case 11:
                if (watermark)
                createCoolText(['A mod', 'made by'], -40);
                else
                createCoolText(['In association', 'with'], -40);
            case 13:
                if (watermark){
                    addMoreText('overdose crew', -40);
                    addMoreText('and', -40);
                    addMoreText('scarletion studio', -40);
}
                    else{
                addMoreText('newgrounds', -40);
                ngSpr.visible = true;
                    }
            // credTextShit.text += '\nNewgrounds';
            case 14:
                deleteCoolText();
                if (!watermark)
                ngSpr.visible = false;
            // credTextShit.visible = false;

            // credTextShit.text = 'Shoutouts Tom Fulp';
            // credTextShit.screenCenter();
            case 15:
                createCoolText(['Friday Night Funkin'],0);
            case 17:
                addMoreText('made by',0);  
                addMoreText('ninjamuffin99',0);  
                addMoreText('phantomArcade',0);  
                addMoreText('kawaisprite',0);  
                addMoreText('evilsk8er',0);  
            // credTextShit.visible = true;
            case 19:
                deleteCoolText();

            case 20:
                createCoolText(['Needy Girl Overdose'],0);
             case 22:
              addMoreText('made by',0);  
            addMoreText('WSS playground',0);  
                // credTextShit.visible = true;
                case 24:
                    deleteCoolText();
            case 25:
                createCoolText([curWacky[0]],0);
            case 26:
                addMoreText(curWacky[1],0);
            // credTextShit.text += '\nlmao';
            case 28:
                deleteCoolText();
            // credTextShit.visible = false;
            // credTextShit.text = "Friday";
            // credTextShit.screenCenter();
            case 30:
                addMoreText('Tuesday',0);
            // credTextShit.visible = true;
            case 31:
                addMoreText('Night',0);
            // credTextShit.text += '\nNight';
            case 32:
                addMoreText('Stream',0); // credTextShit.text += '\nFunkin';
            case 33:
                skipIntro();
        }
    }
}
	var increaseVolume = false;
function skipIntro()
{
    if (!skippedIntro)
		{
			if (playJingle) //Ignore deez
			{
				var easteregg = flixelSave.data.psychDevsEasterEgg;
				if (easteregg == null) easteregg = '';
				easteregg = easteregg.toUpperCase();

				var sound = null;
				switch(easteregg)
				{
					case 'RIVER':
						sound = FlixG.sound.play(Paths.sound('JingleRiver'));
					case 'SHUBS':
						sound = FlixG.sound.play(Paths.sound('JingleShubs'));
					case 'SHADOW':
						FlixG.sound.play(Paths.sound('JingleShadow'));
					case 'BBPANZU':
						sound = FlixG.sound.play(Paths.sound('JingleBB'));

					default: //Go back to normal ugly ass boring GF
						remove(ngSpr);
						remove(credGroup);
						FlixG.camera.flash(OGcolor, 2);
						skippedIntro = true;
						playJingle = false;

						FlixG.sound.playMusic(Paths.music(ClientPrefs.menuMusic));
					
						return;
				}

				transitioning = true;
				if(easteregg == 'SHADOW')
				{
					new FlxTimer().start(3.2, function(tmr)
					{
						remove(ngSpr);
						remove(credGroup);
						FlxG.camera.flash(OGcolor, 0.6);
						transitioning = false;
					});
				}
				else
				{
					remove(ngSpr);
					remove(credGroup);
					FlxG.camera.flash(OGcolor, 3);
					sound.onComplete = function() {
						FlxG.sound.playMusic(Paths.music(ClientPrefs.menuMusic));
						transitioning = false;
					};
				}
				playJingle = false;
			}
			else //Default! Edit this one!!
			{
				remove(ngSpr);
				remove(credGroup);
				FlxG.camera.flash(OGcolor, 4);
               // gfDance.x -= gfDance.width * 1.75;
              //  logoBl.x -= logoBl.width * 1.75;
            //    new FlxTimer().start(0.1, function(tmr)
			//		{
            //    FlxTween.tween(gfDance, {x: gfDance.x + gfDance.width * 1.75}, 1.75, {ease: FlxEase.cubeInOut});
//
             //   FlxTween.tween(logoBl, {x: logoBl.x + logoBl.width * 1.75}, 1.75, {ease: FlxEase.cubeInOut});
             //       });
				var easteregg = flixelSave.data.psychDevsEasterEgg;
				if (easteregg == null) easteregg = '';
				easteregg = easteregg.toUpperCase();
				if (titleEaster){
				if(easteregg == 'SHADOW' && titleEaster)
				{
					FilxG.sound.music.fadeOut();
					if(FreeplayState.vocals != null)
					{
						FreeplayState.vocals.fadeOut();
					}
				}
            		}
			}
			skippedIntro = true;
		}
}