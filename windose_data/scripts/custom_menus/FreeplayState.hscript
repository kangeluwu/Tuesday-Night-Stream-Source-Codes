

var bgs/*:Array<Dynamic>*/ = [];
var songs = [];
var iconArray = [];
var selector;
var curSelected = 0;
var curDifficulty = -1;
var lastDifficultyName = '';

var scoreBG;
var scoreText;
var diffText;
var lerpScore = 0;
var lerpRating = 0;
var intendedScore = 0;
var intendedRating = 0;
var funnidiff = ['简单','普通','困难'];
var diffStuff = '';
var bg;
var intendedColor;
var curPlaying = false;
var colorTween;
var unlockStuff = [false,false,false,false];
var curShader;
function create()
{
	FlixG.autoPause = true;
	if (curDifficulty < 0)
		diffStuff = '简单';	
			else
		diffStuff = funnidiff[curDifficulty];
	if (Main.fpsVar.x != 10)
	Main.fpsVar.x = 10;



	FlixG.mouse.visible = true;
	addHaxeLibrary('LoadingState');
	addHaxeLibrary('FlxBackdrop','flixel.addons.display');
	addHaxeLibrary('FlxGradient','flixel.util');
	addHaxeLibrary('Song');
	togglePersistUpdate(true);
		PlayState.isStoryMode = false;
		WeekData.reloadWeekFiles(false);

for (i in 0...WeekData.weeksList.length) {
			if(weekIsLocked(WeekData.weeksList[i])) continue;

			var leWeek = WeekData.weeksLoaded.get(WeekData.weeksList[i]);
			var leSongs = [];
			var leChars = [];

			for (j in 0...leWeek.songs.length)
			{var wasExtra = false;
		
			
				leSongs.push(leWeek.songs[j][0]);
				leChars.push(leWeek.songs[j][1]);
				
			}

			WeekData.setDirectoryFromWeek(leWeek);
			for (song in leWeek.songs)
			{
				var colors = song[2];
				if(colors == null || colors.length < 3)
				{
					colors = [146, 113, 253];
				}
				addSong(song[0], i, song[1], fromRGB(colors[0], colors[1], colors[2]));
			}
		}
		WeekData.loadTheFirstEnabledMod();

		/*		//KIND OF BROKEN NOW AND ALSO PRETTY USELESS//

		var initSonglist = CoolUtil.coolTextFile(Paths.txt('freeplaySonglist'));
		for (i in 0...initSonglist.length)
		{
			if(initSonglist[i] != null && initSonglist[i].length > 0) {
				var songArray:Array<String> = initSonglist[i].split(":");
				addSong(songArray[0], 0, songArray[1], Std.parseInt(songArray[2]));
			}
		}*/
		bg = new FlxSprite().loadGraphic(Paths.image('menuDesat'));
		bg.antialiasing = ClientPrefs.globalAntialiasing;
		add(bg);
		bg.screenCenter();
		bgs.push(bg);

	grpSongs = new FlxTypedGroup();
	add(grpSongs);

	for (i in 0...songs.length)
		{
			var songText = new Alphabet(0, (70 * i) + 30, songs[i].songName, true, false);
			songText.isMenuItem = true;
			songText.targetY = i;
			grpSongs.add(songText);
			songText.itemType = "D-Shape";
			songText.xAdd -= 200;
			if (songText.width > 980)
			{
				var textScale= 980 / songText.width;
				songText.scale.x = textScale;
				for (letter in songText.lettersArray)
				{
					letter.x *= textScale;
					letter.offset.x *= textScale;
				}
				//songText.updateHitbox();
				//trace(songs[i].songName + ' new scale: ' + textScale);
			}

			Paths.currentModDirectory = songs[i].folder;
			var icon = new HealthIcon(songs[i].songCharacter);
			icon.sprTracker = songText;

			// using a FlxGroup is too much fuss!
			iconArray.push(icon);
			add(icon);
			
			// songText.x += 40;
			// DONT PUT X IN THE FIRST PARAMETER OF new ALPHABET() !!
			// songText.screenCenter(X);
			

		}
		WeekData.setDirectoryFromWeek();
		var font = 'vcr.ttf';
		if(ClientPrefs.langType == 'Chinese')
			font = 'zpix.ttf';
		scoreText = new FlxText(FlxG.width * 0.7, 5, 0, "", 32);
		scoreText.setFormat(Paths.font(font), 32, OGcolor, 'right');

		var heg = 66;
		if(ClientPrefs.langType == 'Chinese')
			heg = 70;
		scoreBG = new FlxSprite(scoreText.x - 6, 0).makeGraphic(1, heg, 0xFF000000);
		scoreBG.alpha = 0.6;
		add(scoreBG);

		diffText = new FlxText(scoreText.x, scoreText.y + 36, 0, "", 24);
		diffText.font = scoreText.font;
		add(diffText);

		add(scoreText);

		if(curSelected >= songs.length) curSelected = 0;
		bg.color = songs[curSelected].color;
		intendedColor = bg.color;

		if(lastDifficultyName == '')
		{
			lastDifficultyName = CoolUtil.defaultDifficulty;
		}
		curDifficulty = Math.round(Math.max(0, CoolUtil.defaultDifficulties.indexOf(lastDifficultyName)));
		
		changeSelection(0,false);
		changeDiff(0);

		var textBG = new FlxSprite(0, FlxG.height - 26).makeGraphic(FlxG.width, 26, 0xFF000000);
		textBG.alpha = 0.6;
		add(textBG);
var leText = "";
var size = 16;
		if (preload){
			if (mobile){
				
				leText = "Press X to listen to the Song / Press C to open the Gameplay Changers Menu / Press Y to Reset your Score and Accuracy.";
				if(ClientPrefs.langType == 'Chinese')
			   leText = "按“X”键来听取歌曲/按“C”键来打开游玩设置界面/按“Y”键来重置你的得分和准确率.";
				size = 16;
			}
				   else{
					leText = "Press SPACE to listen to the Song / Press CTRL to open the Gameplay Changers Menu / Press RESET to Reset your Score and Accuracy.";
					if(ClientPrefs.langType == 'Chinese')
				   leText = "按“空格”键来听取歌曲/按“ctrl”键来打开游玩设置界面/按重置键来重置你的得分和准确率.";
					size = 16;
				   }
		
		}else{
		 leText = "Press CTRL to open the Gameplay Changers Menu / Press RESET to Reset your Score and Accuracy.";
		 if(ClientPrefs.langType == 'Chinese')
		leText = "按“ctrl”键来打开游玩设置界面/按重置键来重置你的得分和准确率.";
		 size = 18;
}
		var text = new FlxText(textBG.x, textBG.y + 4, FlxG.width, leText, size);
		text.setFormat(Paths.font(font), size, OGcolor, 'right');
		text.scrollFactor.set();
		add(text);
		if (ClientPrefs.classicStyle){
			textBG.alpha = 0;
			text.alpha = 0;
		}
		currentFreeplayState.initLuaShader('desaturation');
		curShader = currentFreeplayState.createRuntimeShader('desaturation');
FlixG.camera.setFilters([new ShaderFilter(curShader)]);
if (mobile)
	addVirtualPads('full', 'a_b_c_x_y_z');
}
function closeSubState() {
	changeSelection(0, false);
	togglePersistUpdate(true);
}

function addSong(songName, weekNum, songCharacter, color)
{
	songs.push(new SongMetadata(songName, weekNum, songCharacter, color));
}

function weekIsLocked(name) {
	var leWeek = WeekData.weeksLoaded.get(name);
	
	return (!leWeek.startUnlocked && leWeek.weekBefore.length > 0 && (!StoryMenuState.weekCompleted.exists(leWeek.weekBefore) || !StoryMenuState.weekCompleted.get(leWeek.weekBefore)));
}
var instPlaying = -1;
var holdTime = 0;
var instStuff = '';
var voicesStuff = '';
var desaturateAmount = 1.0;
var distortionTime = 0.0;
var desaturateAmplitude = 0.05;
var frequency = 5;
function update(elapsed)
{
	distortionTime -= ((elapsed / (1 / 400)) * 0.0125);
	curShader.setFloat("desaturationAmount", desaturateAmount);
	curShader.setFloat("distortionTime", distortionTime);
	curShader.setFloat("amplitude", desaturateAmplitude);
	curShader.setFloat("frequency", frequency);


	// :grief: what
	if (FlixG.sound.music.volume < 0.7)
	{
		FlixG.sound.music.volume += 0.5 * FlixG.elapsed;
	}
	// why the fuck does this exist
	lerpScore = Math.floor(FlxMath.lerp(lerpScore, intendedScore, CoolUtil.boundTo(elapsed * 24, 0, 1)));
		lerpRating = FlxMath.lerp(lerpRating, intendedRating, CoolUtil.boundTo(elapsed * 12, 0, 1));
		
		if (Math.abs(lerpScore - intendedScore) <= 10)
			lerpScore = intendedScore;
		if (Math.abs(lerpRating - intendedRating) <= 0.01)
			lerpRating = intendedRating;

		var ratingSplit = Std.string(Highscore.floorDecimal(lerpRating * 100, 2)).split('.');
		if(ratingSplit.length < 2) { //No decimals, add an empty space
			ratingSplit.push('');
		}
		
		while(ratingSplit[1].length < 2) { //Less than 2 decimals in it, add decimals then
			ratingSplit[1] += '0';
		}
		if(ClientPrefs.langType == 'English'){
		if (!ClientPrefs.classicStyle)
		scoreText.text = 'PERSONAL BEST: ' + lerpScore + ' (' + ratingSplit.join('.') + '%)';
		else
		scoreText.text = 'PERSONAL BEST:' + lerpScore;
	}else if(ClientPrefs.langType == 'Chinese'){
		if (!ClientPrefs.classicStyle)
		scoreText.text = '个人最好: ' + lerpScore + ' (' + ratingSplit.join('.') + '%)';
		else
		scoreText.text = '个人最好:' + lerpScore;
	}
		positionHighscore();

		var upP = controls.UI_UP_P;
		var downP = controls.UI_DOWN_P;
		var accepted = controls.ACCEPT;
		var space = FlixG.keys.justPressed.SPACE || visPressed('X');
		var ctrl = FlixG.keys.justPressed.CONTROL || visPressed('C');

		var shiftMult = 1;
		if(FlixG.keys.pressed.SHIFT || visPressed('Z')) shiftMult = 3;

		if(songs.length > 1)
		{
			if (upP)
			{
				FlixG.sound.play(Paths.sound('scrollMenu'), 0.2);
				changeSelection(-shiftMult,false);
				holdTime = 0;
			}
			if (downP)
			{
				FlixG.sound.play(Paths.sound('scrollMenu'), 0.2);
				changeSelection(shiftMult,false);
				holdTime = 0;
			}

			if(controls.UI_DOWN || controls.UI_UP)
			{
				var checkLastHold = Math.floor((holdTime - 0.5) * 10);
				holdTime += elapsed;
				var checkNewHold = Math.floor((holdTime - 0.5) * 10);

				if(holdTime > 0.5 && checkNewHold - checkLastHold > 0)
				{
					if (controls.UI_UP)
					changeSelection((checkNewHold - checkLastHold) * (-shiftMult),false);
					else
					changeSelection((checkNewHold - checkLastHold) * (shiftMult),false);

					changeDiff(0);
				}
			}

			if(FlixG.mouse.wheel != 0)
			{
				FlixG.sound.play(Paths.sound('scrollMenu'), 0.2);
				changeSelection(-shiftMult * FlixG.mouse.wheel, false);
				changeDiff(0);
			}
			if (FlixG.mouse.justPressed)
				{
					if (FlixG.mouse.overlaps(grpSongs.members[curSelected]))
					{
						enter();
					}
				}
	
		}

		if (controls.UI_LEFT_P)
			changeDiff(-1);
		else if (controls.UI_RIGHT_P)
			changeDiff(1);
		else if (upP || downP) changeDiff(0);

		if (controls.BACK)
		{
			togglePersistUpdate(false);
			if(colorTween != null) {
				colorTween.cancel();
			}

			FlixG.sound.play(Paths.sound('cancelMenu'));
			MusicBeatState.switchState(new MainMenuState());
		}

		if(ctrl)
		{
			togglePersistUpdate(false);
			openSubState(new GameplayChangersSubstate());
		}
		else if(space || ClientPrefs.classicStyle)
		{
			if(instPlaying != curSelected)
			{
				if (preload){
					destroyFreeplayVocals();
				FlixG.sound.music.volume = 0;
				Paths.currentModDirectory = songs[curSelected].folder;
				var poop = Highscore.formatSong(songs[curSelected].songName.toLowerCase(), curDifficulty);
				PlayState.SONG = Song.loadFromJson(poop, songs[curSelected].songName.toLowerCase());
				
				if (PlayState.SONG.needsVoices && !ClientPrefs.classicStyle)
					FreeplayState.vocals = new FlxSound().loadEmbedded(Paths.voices(PlayState.SONG.song,voicesStuff));
				else
					FreeplayState.vocals = new FlxSound();

				FlixG.sound.list.add(FreeplayState.vocals);
				FlixG.sound.playMusic(Paths.inst(PlayState.SONG.song,instStuff), 0.7);
				FreeplayState.vocals.play();
				FreeplayState.vocals.persist = true;
				FreeplayState.vocals.looped = true;
				FreeplayState.vocals.volume = 0.7;
				instPlaying = curSelected;
}
			}
		}
		if(!space && (controls.RESET || visPressed('Y')))
		{
			togglePersistUpdate(false);
			openSubState(new ResetScoreSubState(songs[curSelected].songName, curDifficulty, songs[curSelected].songCharacter));
			FlixG.sound.play(Paths.sound('scrollMenu'));
		}
		if (!space && accepted)
		{
			enter();
		}
}
function enter()
	{
		FlixG.mouse.visible = false;
		togglePersistUpdate(false);
			var songLowercase = Paths.formatToSongPath(songs[curSelected].songName);
			var poop = Highscore.formatSong(songLowercase, curDifficulty);
			/*#if MODS_ALLOWED
			if(!sys.FileSystem.exists(Paths.modsJson(songLowercase + '/' + poop)) && !sys.FileSystem.exists(Paths.json(songLowercase + '/' + poop))) {
			#else
			if(!OpenFlAssets.exists(Paths.json(songLowercase + '/' + poop))) {
			#end
				poop = songLowercase;
				curDifficulty = 1;
				trace('Couldnt find file');
			}*/
			trace(poop);

			PlayState.SONG = Song.loadFromJson(poop, songLowercase);
			PlayState.isStoryMode = false;
			PlayState.storyDifficulty = curDifficulty;

			trace('CURRENT WEEK: ' + WeekData.getWeekFileName());

			if(colorTween != null) {
				colorTween.cancel();
			}

			if (debugTarget && FlixG.keys.pressed.SHIFT|| visPressed('Z')){
				chartConfrim();
			}else{
				if (!ClientPrefs.skipChartTypeMenu){
					togglePersistUpdate(false);
					openSubState(new ChartTypeMenu());
				}
				else{
					LoadingState.loadAndSwitchState(new PlayState(), true);
						FlixG.sound.music.volume = 0;
				}
			}
					
			destroyFreeplayVocals();
	}
function changeDiff(change)
{
	curDifficulty += change;

		if (curDifficulty < 0)
			curDifficulty = CoolUtil.difficulties.length-1;
		if (curDifficulty >= CoolUtil.difficulties.length)
			curDifficulty = 0;

		lastDifficultyName = CoolUtil.difficulties[curDifficulty];
		if (curDifficulty < 0)
			diffStuff = '简单';	
				else
			diffStuff = funnidiff[curDifficulty];
		if (!switchTarget){
		intendedScore = Highscore.getScore(songs[curSelected].songName, curDifficulty);
		intendedRating = Highscore.getRating(songs[curSelected].songName, curDifficulty);
}
		PlayState.storyDifficulty = curDifficulty;
		if(ClientPrefs.langType == 'English'){
		diffText.text = '< ' + CoolUtil.difficultyString() + ' >';
		}
		else if(ClientPrefs.langType == 'Chinese'){
			diffText.text = '< ' + diffStuff + ' >';
			}
		positionHighscore();
		if (PlayState.SONG != null && FNFAssets.exists(Paths.inst(PlayState.SONG.song,'-' + CoolUtil.difficulties[curDifficulty])))
			instStuff = '-' + CoolUtil.difficulties[curDifficulty];
	else
	instStuff = '';
	if (PlayState.SONG != null && PlayState.SONG.needsVoices && FNFAssets.exists(Paths.voices(PlayState.SONG.song,'-' + CoolUtil.difficulties[curDifficulty])))
	voicesStuff = '-' + CoolUtil.difficulties[curDifficulty];
	else
	voicesStuff = '';
}
function stepHit(step)
{


}

function resyncVocals()
{
	FreeplayState.vocals.pause();

	FlixG.sound.music.play();
	
	Conductor.songPosition = FlixG.sound.music.time;
	FreeplayState.vocals.time = Conductor.songPosition;
	FreeplayState.vocals.play();
}

function changeSelection(change, playSound)
{

	if(playSound) FlixG.sound.play(Paths.sound('scrollMenu'));

		curSelected += change;

		if (curSelected < 0)
			curSelected = songs.length - 1;
		if (curSelected >= songs.length)
			curSelected = 0;

		var newColor = songs[curSelected].color;
		if(newColor != intendedColor) {
			if(colorTween != null) {
				colorTween.cancel();
			}
			intendedColor = newColor;
			colorTween = FlxTween.color(bg, 1, bg.color, intendedColor, {
				onComplete: function(twn) {
					colorTween = null;
				}
			});
		}

		// selector.y = (70 * curSelected) + 30;

		if (!switchTarget){
		intendedScore = Highscore.getScore(songs[curSelected].songName, curDifficulty);
		intendedRating = Highscore.getRating(songs[curSelected].songName, curDifficulty);
		}

		var bullShit = 0;

		for (i in 0...iconArray.length)
		{
			iconArray[i].alpha = 0.6;
		}

		iconArray[curSelected].alpha = 1;

		for (item in grpSongs.members)
		{
			item.targetY = bullShit - curSelected;
			bullShit++;

			item.alpha = 0.6;
			// item.setGraphicSize(Std.int(item.width * 0.8));

			if (item.targetY == 0)
			{
				item.alpha = 1;
				// item.setGraphicSize(Std.int(item.width));
			}
		}
		
		Paths.currentModDirectory = songs[curSelected].folder;
		PlayState.storyWeek = songs[curSelected].week;

		CoolUtil.difficulties = CoolUtil.defaultDifficulties.copy();
		var diffStr = WeekData.getCurrentWeek().difficulties;
		if(diffStr != null) diffStr = StringTools.trim(diffStr); //Fuck you HTML5
	
		if(diffStr != null && diffStr.length > 0)
		{
			var diffs = diffStr.split(',');
			var i = diffs.length - 1;
			while (i > 0)
			{
				if(diffs[i] != null)
				{
					diffs[i] = StringTools.trim(diffs[i]);
					if(diffs[i].length < 1) diffs.remove(diffs[i]);
				}
				--i;
			}
	
			if(diffs.length > 0 && diffs[0].length > 0)
			{
				CoolUtil.difficulties = diffs;
			}
		}
		if(CoolUtil.difficulties.contains(CoolUtil.defaultDifficulty))
		{
			curDifficulty = Math.round(Math.max(0, CoolUtil.defaultDifficulties.indexOf(CoolUtil.defaultDifficulty)));
		}
		else
		{
			curDifficulty = 0;
		}

		var newPos = CoolUtil.difficulties.indexOf(lastDifficultyName);
		//trace('Pos of ' + lastDifficultyName + ' is ' + newPos);
		if(newPos > -1)
		{
			curDifficulty = newPos;
		}
}
function positionHighscore() {
	scoreText.x = FlixG.width - scoreText.width - 6;

	scoreBG.scale.x = FlixG.width - scoreText.x + 6;
	scoreBG.x = FlixG.width - (scoreBG.scale.x / 2);
	diffText.x = Std.int(scoreBG.x + (scoreBG.width / 2));
	diffText.x -= diffText.width / 2;
}