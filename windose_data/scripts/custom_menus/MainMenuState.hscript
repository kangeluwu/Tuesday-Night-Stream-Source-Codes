

var curSelected = 0;
var menuItems;

var optionShit = ['story_mode', 'freeplay', 'mods', 'awards', 'credits','donate', 'options'];

var camGame;
var camAchievement;
var debugKeys;


var magenta;
var camFollow;
var camFollowPos;
 var camGame;
 var camAchievement;
function create()
{
    FlixG.mouse.visible = true;
    addHaxeLibrary('LoadingState');
    addHaxeLibrary('OptionsState','options');
    addHaxeLibrary('MasterEditorMenu','editors');
    if (!FlixG.sound.music.playing)
        {
            FlixG.sound.playMusic(Paths.music(ClientPrefs.menuMusic),0);
        }

    if (!modsAllow) 
        optionShit.remove('mods');
    if (!achiAllow) 
        optionShit.remove('awards');
    if (switchTarget)
        optionShit.remove('donate');


    

    camGame = new FlxCamera();
    camAchievement = new FlxCamera();
    camerabgAlphaShits(camAchievement);

    FlixG.cameras.reset(camGame);
    FlixG.cameras.add(camAchievement);
    FlxCamera.defaultCameras = [camGame];

    togglePersistUpdate(true);
    togglePersistentDraw(true);
    var yScroll = Math.max(0.25 - (0.05 * (optionShit.length - 4)), 0.1);
    var bg = new FlxSprite(-80).loadGraphic(FNFAssets.getBitmapData('windose_data/images/menuBG.png'));
    bg.scrollFactor.x = 0;
    bg.scrollFactor.y = yScroll;
    bg.setGraphicSize(Std.int(bg.width * 1.175));
    bg.updateHitbox();
    bg.screenCenter();
    bg.antialiasing = ClientPrefs.globalAntialiasing;
    add(bg);

    debugKeys = ClientPrefs.copyKey(ClientPrefs.keyBinds.get('debug_1'));


    

    camFollow = new FlxObject(0, 0, 1, 1);
    camFollowPos = new FlxObject(0, 0, 1, 1);
    add(camFollow);
    add(camFollowPos);

    magenta = new FlxSprite(-80).loadGraphic(FNFAssets.getBitmapData('windose_data/images/menuDesat.png'));
    magenta.scrollFactor.x = 0;
    magenta.scrollFactor.y = yScroll;
    magenta.setGraphicSize(Std.int(magenta.width * 1.175));
    magenta.updateHitbox();
    magenta.screenCenter();
    magenta.visible = false;
    magenta.antialiasing = ClientPrefs.globalAntialiasing;
    magenta.color = 0xFFfd719b;
    add(magenta);
    // magenta.scrollFactor.set();

    menuItems = new FlxGroup();
    add(menuItems);


    var scale = 1;
    for (i in 0...optionShit.length)
    {
        var offset = 108 - (Math.max(optionShit.length, 4) - 4) * 80;
        var menuItem = new FlxSprite(0, (i * 140)  + offset);
        menuItem.x = (FlxG.width / 2 ) - 220;
        if (i == 0)
        menuItem.x -= 70;
        if (i == 2)
            menuItem.x += 50;

        menuItem.scale.x = scale;
        menuItem.scale.y = scale;
        menuItem.frames = Paths.getSparrowAtlas('mainmenu/menu_' + optionShit[i]);
        menuItem.animation.addByPrefix('idle', optionShit[i] + " basic", 24);
        menuItem.animation.addByPrefix('selected', optionShit[i] + " white", 24);
        menuItem.animation.play('idle');
        menuItem.ID = i;
        menuItems.add(menuItem);
        var scr = (optionShit.length - 4) * 0.135;
        if(optionShit.length < 6) scr = 0;
        menuItem.scrollFactor.set(0, scr);
        menuItem.antialiasing = ClientPrefs.globalAntialiasing;
        //menuItem.setGraphicSize(Std.int(menuItem.width * 0.58));
        menuItem.updateHitbox();

    }

    FlxG.camera.follow(camFollowPos, null, 1);

    var funniVerison = CoolUtil.coolTextFile(Paths.txt('verisons'));
		var engineName;
		var gameVersion;
		engineName = funniVerison[0];
		MainMenuState.RCEVersion = funniVerison[1];

		gameVersion = funniVerison[2];
		var versionShit = new FlxText(12, FlixG.height - 44, 0, engineName + MainMenuState.RCEVersion, 12);
		versionShit.scrollFactor.set();
		versionShit.setFormat("VCR OSD Mono", 16, OGcolor, "left", FlxTextBorderStyle.OUTLINE, BlackColor);
		add(versionShit);
		var versionShit = new FlxText(12, FlixG.height - 24, 0, "v" + gameVersion, 12);
		versionShit.scrollFactor.set();
		versionShit.setFormat("VCR OSD Mono", 16, OGcolor, "left", FlxTextBorderStyle.OUTLINE, BlackColor);
		add(versionShit);
    changeItem(0);
    if (achiAllow){
		Achievements.loadAchievements();
		var leDate = Date.now();
		if (leDate.getDay() == 5 && leDate.getHours() >= 18) {
			var achieveID = Achievements.getAchievementIndex('friday_night_play');
			if(!Achievements.isAchievementUnlocked(Achievements.achievementsStuff[achieveID][2])) { //It's a friday night. WEEEEEEEEEEEEEEEEEE
				Achievements.achievementsMap.set(Achievements.achievementsStuff[achieveID][2], true);
				giveAchievement();
				ClientPrefs.saveSettings();
			}
		}
    }
    var test = new FlxSprite().makeGraphic(Std.int(FlxG.width * 8), Std.int(FlxG.height * 8), BlackColor);
    test.scrollFactor.set();

    add(test);
    FlxTween.tween(test, {alpha: 0}, 0.85,{
        ease: FlxEase.linear,
        onComplete: function(twn)
        {
            remove(test);
        }
    });
}
function giveAchievement() {
    if (achiAllow){
    add(new AchievementObject('friday_night_play', camAchievement));
    FlixG.sound.play(Paths.sound('confirmMenu'), 0.7);
    trace('Giving achievement "friday_night_play"');
    }
}
var selectedSomethin = false;
function update(elapsed)
{
    if (FlixG.sound.music.volume < 0.8)
    {
        FlixG.sound.music.volume += 0.5 * FlixG.elapsed;
        if(FreeplayState.vocals != null) FreeplayState.vocals.volume += 0.5 * elapsed;
    }

    var lerpVal = CoolUtil.boundTo(elapsed * 7.5, 0, 1);
    camFollowPos.setPosition(FlxMath.lerp(camFollowPos.x, camFollow.x, lerpVal), FlxMath.lerp( camFollowPos.y, camFollow.y, lerpVal)); 

    if (!selectedSomethin)
    {
        if (controls.UI_UP_P)
			{
				FlixG.sound.play(Paths.sound('scrollMenu'));
				changeItem(-1);
			}

			if (controls.UI_DOWN_P)
			{
				FlixG.sound.play(Paths.sound('scrollMenu'));
				changeItem(1);
			}

        if (controls.BACK)
        {
            selectedSomethin = true;
            FlixG.sound.play(Paths.sound('cancelMenu'));

            MusicBeatState.switchState(new TitleState());
        }
            if(FlixG.mouse.wheel != 0)
                {
                    FlixG.sound.play(Paths.sound('scrollMenu'));
                    changeItem(-1 * FlixG.mouse.wheel, false);
                }
        if (FlixG.mouse.justPressed)
			{
				if (FlixG.mouse.overlaps(menuItems.members[curSelected]))
				{
					enter();
				}
			}

        if (controls.ACCEPT)
        {
            enter();
        }
        else if (desktop && FlxG.keys.anyJustPressed(debugKeys))
        {
            selectedSomethin = true;
            MusicBeatState.switchState(new MasterEditorMenu());
        }
    }


}
function enter()
    {
    if (optionShit[curSelected] == 'donate')
        {
            CoolUtil.browserLoad('https://ninja-muffin24.itch.io/funkin');
        }else
        {
        selectedSomethin = true;
        FlixG.sound.play(Paths.sound('confirmMenu'));

        if(ClientPrefs.flashing) FlxFlicker.flicker(magenta, 1.1, 0.15, false);

        menuItems.forEach(function(spr)
        {
            if (curSelected != spr.ID)
            {
                FlxTween.tween(spr, {alpha: 0}, 0.4, {
                    ease: FlxEase.quadOut,
                    onComplete: function(twn)
                    {
                        spr.kill();
                    }
                });
            }
            else
            {
                FlxFlicker.flicker(spr, 1, 0.06, false, false, function(flick)
                {
                    var daChoice = optionShit[curSelected];

                    switch (daChoice)
                    {
                        case 'story_mode':
                            LoadingState.loadAndSwitchState(new StoryMenuState());
                            trace("Story Menu Selected");
                            case 'freeplay':
                                MusicBeatState.switchState(new FreeplayState());

                            case 'mods':
                                if (modsAllow)
                                MusicBeatState.switchState(new ModsMenuState());

                            case 'awards':
                                MusicBeatState.switchState(new AchievementsMenuState());
                            case 'credits':
                                MusicBeatState.switchState(new CreditsState());
                            case 'options':
                                LoadingState.loadAndSwitchState(new OptionsState());
                    }
                });
            }
        });
    
}
}
function changeItem(huh)
{
    curSelected += huh;

    if (curSelected >= menuItems.length)
        curSelected = 0;
    if (curSelected < 0)
        curSelected = menuItems.length - 1;

    menuItems.forEach(function(spr)
    {
        spr.animation.play('idle');
        spr.updateHitbox();
        if (spr.ID == curSelected)
        {
            spr.animation.play('selected');
            var add = 0;
            if(menuItems.length > 4) {
                add = menuItems.length * 8;
            }
            camFollow.setPosition(spr.getGraphicMidpoint().x, spr.getGraphicMidpoint().y - add);
            spr.centerOffsets();
        }


    });
}